name: Multi-Container Integration Test

on:
  push:
    branches:
      - milestone4_CI_test
  pull_request:
    branches:
      - milestone4_CI_test

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout
        uses: actions/checkout@v4

      # Step 2: Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Step 3: Cache Docker layers
      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      # Step 4: Build Docker images using Docker Compose
      - name: Build Docker images
        run: docker-compose -f docker-compose.yml build

      # Step 5: Start Docker containers using Docker Compose
      - name: Start Docker containers
        run: docker-compose -f docker-compose.yml up -d

      # Step 6: Wait for services to be ready
      - name: Wait for services to start
        run: sleep 10  # Adjust this duration as needed

      # Step 7: Set up Python and cache pip packages
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('Pipfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Step 8: Install Pipenv and dependencies
      - name: Install Pipenv
        run: pip install pipenv

      - name: Install dependencies with Pipenv
        run: pipenv install

      # Step 9: Run Flake8 for code linting
      # - name: Run Flake8
      #   run: pipenv run flake8 .  

      # Step 10: Run integration tests
      - name: Run integration tests
        run: pipenv run pytest tests/integration_tests --cov=. --cov-report=html --cov-fail-under=20

      # Step 11: Upload coverage report
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: htmlcov  # The folder where pytest-cov stores HTML reports

      # Step 12: Tear down Docker containers
      - name: Stop and remove Docker containers
        if: always()
        run: docker-compose -f docker-compose.yml down
