- name: Configure containers on app server
  hosts: appserver
  connection: ssh
  become: true

  tasks:
    - name: Create secrets directory
      file:
        path: "/srv/secrets"
        state: "directory"
        mode: 0755

    - name: Copy service account key file to remote VM
      copy:
        src: /secrets/deployment.json
        dest: /srv/secrets/deployment.json
        mode: 0644

    - name: Authenticate gcloud using service account
      shell: "gcloud auth activate-service-account --key-file /srv/secrets/deployment.json"

    - name: Create network
      community.docker.docker_network:
        name: "{{docker_network_name}}"
        driver: "bridge"
        attachable: "yes"

    - name: Copy docker tag file
      copy:
        src: .docker-tag
        dest: .docker-tag
        mode: 0644

    - name: Get docker tag
      shell: "cat .docker-tag"
      register: tag

    - name: Print tag
      debug:
        var: tag

    - name: Create frontend container
      community.docker.docker_container:
        name: "frontend"
        image: "gcr.io/{{ gcp_project }}/billionairs_frontend:{{ tag.stdout }}"
        state: started
        recreate: yes
        pull: yes
        restart: yes
        published_ports:
          - 8501:8501
        networks:
          - name: "{{docker_network_name}}"

    - name: Create persistent directory
      file:
        path: "/mnt/disk-1/persistent"
        state: "directory"
        mode: 0777

    - name: Create chromadb directory
      file:
        path: "/mnt/disk-1/chromadb"
        state: "directory"
        mode: 0777

    - name: Create api-service container
      community.docker.docker_container:
        name: "api-service"
        image: "gcr.io/{{ gcp_project }}/billionairs_api:{{ tag.stdout }}"
        state: started
        recreate: yes
        published_ports:
          - 8001:8001
        env:
          OPENAI_API_KEY: "{{ openai_api_key }}"
        networks:
          - name: "{{docker_network_name}}"
        volumes:
          - /mnt/disk-1/persistent:/persistent
          - /srv/secrets:/secrets

    - name: Check if containers are running
      shell: docker ps

    - name: Remove all unused containers
      shell: docker system prune -a -f
